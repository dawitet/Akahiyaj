package com.dawitf.akahidegn.ui.components.search

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.expandVertically
import androidx.compose.animation.shrinkVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import com.dawitf.akahidegn.domain.model.AutocompleteSuggestion
import com.dawitf.akahidegn.domain.model.SuggestionType
import com.dawitf.akahidegn.util.LocationUtils

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EnhancedSearchBar(
    query: String,
    onQueryChange: (String) -> Unit,
    onSearch: (String) -> Unit,
    suggestions: List<AutocompleteSuggestion>,
    onSuggestionClick: (AutocompleteSuggestion) -> Unit,
    onClearRecentSearches: () -> Unit,
    isLoading: Boolean = false,
    placeholder: String = "የመድረሻ ቦታ ይፈልጉ...",
    modifier: Modifier = Modifier
) {
    var isExpanded by remember { mutableStateOf(false) }
    val focusRequester = remember { FocusRequester() }
    val keyboardController = LocalSoftwareKeyboardController.current
    
    Column(modifier = modifier) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            OutlinedTextField(
                value = query,
                onValueChange = onQueryChange,
                modifier = Modifier
                    .fillMaxWidth()
                    .focusRequester(focusRequester)
                    .onFocusChanged { focusState ->
                        isExpanded = focusState.isFocused && (suggestions.isNotEmpty() || query.isNotEmpty())
                    },
                placeholder = {
                    Text(
                        text = placeholder,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                },
                leadingIcon = {
                    if (isLoading) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(20.dp),
                            strokeWidth = 2.dp
                        )
                    } else {
                        Icon(
                            imageVector = Icons.Default.Search,
                            contentDescription = "Search",
                            tint = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                },
                trailingIcon = {
                    Row {
                        if (query.isNotEmpty()) {
                            IconButton(
                                onClick = { 
                                    onQueryChange("")
                                    isExpanded = false
                                }
                            ) {
                                Icon(
                                    imageVector = Icons.Default.Clear,
                                    contentDescription = "Clear",
                                    tint = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }
                        }
                        
                        IconButton(
                            onClick = { 
                                // Toggle filter dialog - this would be handled by parent
                            }
                        ) {
                            Icon(
                                imageVector = Icons.Default.FilterList,
                                contentDescription = "Filters",
                                tint = MaterialTheme.colorScheme.primary
                            )
                        }
                    }
                },
                keyboardOptions = KeyboardOptions(
                    imeAction = ImeAction.Search
                ),
                keyboardActions = KeyboardActions(
                    onSearch = {
                        if (query.isNotBlank()) {
                            onSearch(query)
                            keyboardController?.hide()
                            isExpanded = false
                        }
                    }
                ),
                singleLine = true,
                colors = OutlinedTextFieldDefaults.colors(
                    focusedBorderColor = MaterialTheme.colorScheme.primary,
                    unfocusedBorderColor = MaterialTheme.colorScheme.outline
                )
            )
        }
        
        // Suggestions dropdown
        AnimatedVisibility(
            visible = isExpanded && suggestions.isNotEmpty(),
            enter = expandVertically(),
            exit = shrinkVertically()
        ) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 4.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            ) {
                LazyColumn(
                    modifier = Modifier
                        .fillMaxWidth()
                        .heightIn(max = 300.dp),
                    contentPadding = PaddingValues(vertical = 8.dp)
                ) {
                    // Group suggestions by type
                    val recentSearches = suggestions.filter { it.type == SuggestionType.RECENT_SEARCH }
                    val popularDestinations = suggestions.filter { it.type == SuggestionType.POPULAR_DESTINATION }
                    val nearbyLocations = suggestions.filter { it.type == SuggestionType.NEARBY_LOCATION }
                    
                    // Recent searches section
                    if (recentSearches.isNotEmpty()) {
                        item {
                            SuggestionSectionHeader(
                                title = "የቅርብ ጊዜ ፍለጋዎች",
                                onClearClick = onClearRecentSearches
                            )
                        }
                        items(recentSearches) { suggestion ->
                            SuggestionItem(
                                suggestion = suggestion,
                                onClick = { onSuggestionClick(suggestion) }
                            )
                        }
                    }
                    
                    // Popular destinations section
                    if (popularDestinations.isNotEmpty()) {
                        item {
                            SuggestionSectionHeader(
                                title = "ተወዳጅ መድረሻዎች"
                            )
                        }
                        items(popularDestinations) { suggestion ->
                            SuggestionItem(
                                suggestion = suggestion,
                                onClick = { onSuggestionClick(suggestion) }
                            )
                        }
                    }
                    
                    // Nearby locations section
                    if (nearbyLocations.isNotEmpty()) {
                        item {
                            SuggestionSectionHeader(
                                title = "በአቅራቢያ ያሉ ቦታዎች"
                            )
                        }
                        items(nearbyLocations) { suggestion ->
                            SuggestionItem(
                                suggestion = suggestion,
                                onClick = { onSuggestionClick(suggestion) }
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun SuggestionSectionHeader(
    title: String,
    onClearClick: (() -> Unit)? = null
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = title,
            style = MaterialTheme.typography.labelMedium,
            fontWeight = FontWeight.SemiBold,
            color = MaterialTheme.colorScheme.primary
        )
        
        if (onClearClick != null) {
            TextButton(
                onClick = onClearClick,
                modifier = Modifier.padding(0.dp)
            ) {
                Text(
                    text = "አጽዳ",
                    style = MaterialTheme.typography.labelSmall,
                    color = MaterialTheme.colorScheme.error
                )
            }
        }
    }
}

@Composable
private fun SuggestionItem(
    suggestion: AutocompleteSuggestion,
    onClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // Icon based on suggestion type
        Icon(
            imageVector = when (suggestion.type) {
                SuggestionType.RECENT_SEARCH -> Icons.Default.History
                SuggestionType.POPULAR_DESTINATION -> Icons.Default.TrendingUp
                SuggestionType.NEARBY_LOCATION -> Icons.Default.LocationOn
                SuggestionType.SAVED_LOCATION -> Icons.Default.Bookmark
            },
            contentDescription = null,
            modifier = Modifier.size(20.dp),
            tint = MaterialTheme.colorScheme.onSurfaceVariant
        )
        
        Spacer(modifier = Modifier.width(12.dp))
        
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = suggestion.text,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurface,
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
            
            if (suggestion.subtitle != null) {
                Text(
                    text = suggestion.subtitle,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
            }
        }
        
        // Distance indicator
        if (suggestion.distance != null) {
            Text(
                text = LocationUtils.formatDistance(suggestion.distance),
                style = MaterialTheme.typography.labelSmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
        
        // Transfer icon for easy selection
        Spacer(modifier = Modifier.width(8.dp))
        Icon(
            imageVector = Icons.Default.NorthWest,
            contentDescription = "Select",
            modifier = Modifier.size(16.dp),
            tint = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}
