package com.dawitf.akahidegn.data.repository

import androidx.paging.PagingData
import com.dawitf.akahidegn.Group
import com.dawitf.akahidegn.core.error.AppError
import com.dawitf.akahidegn.core.result.Result
import com.dawitf.akahidegn.data.local.dao.GroupDao
import com.dawitf.akahidegn.data.remote.service.FirebaseGroupService
import com.dawitf.akahidegn.domain.model.*
import com.dawitf.akahidegn.domain.repository.EnhancedGroupRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.first
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class EnhancedGroupRepositoryImpl @Inject constructor(
    private val firebaseGroupService: FirebaseGroupService,
    private val groupDao: GroupDao
) : EnhancedGroupRepository {

    override fun getGroupsWithFilters(
        latitude: Double,
        longitude: Double,
        filters: SearchFilters
    ): Flow<PagingData<Group>> {
        // Return empty paging data for now - will be implemented later
        return flow { emit(PagingData.empty()) }
    }

    override suspend fun searchGroups(
        query: String,
        latitude: Double,
        longitude: Double,
        filters: SearchFilters
    ): Result<List<Group>> {
        return try {
            // Use Firebase service to get all groups and filter locally
            val result = firebaseGroupService.getAllGroups().first()
            
            when (result) {
                is com.dawitf.akahidegn.core.result.Result.Success -> {
                    val allGroups = result.data
                    
                    // Filter groups based on search criteria
                    val filteredGroups = allGroups.filter { group ->
                        // Filter by query
                        if (query.isNotBlank()) {
                            group.destinationName?.contains(query, ignoreCase = true) == true
                        } else true
                    }
                    
                    Result.Success(filteredGroups)
                }
                is com.dawitf.akahidegn.core.result.Result.Error -> {
                    Result.Error(result.error)
                }
            }
        } catch (e: Exception) {
            Result.Error(AppError.UnknownError(e.message ?: "Search failed"))
        }
    }

    override suspend fun getAutocompleteSuggestions(
        query: String,
        latitude: Double,
        longitude: Double
    ): Result<List<AutocompleteSuggestion>> {
        return try {
            // Mock implementation - return some sample suggestions
            val suggestions = listOf(
                AutocompleteSuggestion("አዲስ አበባ", SuggestionType.POPULAR_DESTINATION, "Capital City"),
                AutocompleteSuggestion("አዳማ", SuggestionType.POPULAR_DESTINATION, "Popular destination"),
                AutocompleteSuggestion("ባህርዳር", SuggestionType.POPULAR_DESTINATION, "Tourist destination")
            ).filter { it.text.contains(query, ignoreCase = true) }
            
            Result.Success(suggestions)
        } catch (e: Exception) {
            Result.Error(AppError.UnknownError(e.message ?: "Autocomplete failed"))
        }
    }

    override suspend fun saveRecentSearch(search: RecentSearch): Result<Unit> {
        return try {
            // Mock implementation - in real app would save to local database
            Result.Success(Unit)
        } catch (e: Exception) {
            Result.Error(AppError.UnknownError(e.message ?: "Failed to save recent search"))
        }
    }

    override suspend fun getRecentSearches(): Result<List<RecentSearch>> {
        return try {
            // Mock implementation - return empty list for now
            // In a real implementation, this would fetch from local database
            Result.Success(emptyList<RecentSearch>())
        } catch (e: Exception) {
            Result.Error(AppError.UnknownError(e.message ?: "Failed to get recent searches"))
        }
    }

    override suspend fun clearRecentSearches(): Result<Unit> {
        return try {
            // Mock implementation - in real app would clear local database
            Result.Success(Unit)
        } catch (e: Exception) {
            Result.Error(AppError.UnknownError(e.message ?: "Failed to clear recent searches"))
        }
    }

    override suspend fun getPopularDestinations(
        latitude: Double,
        longitude: Double,
        limit: Int
    ): Result<List<PopularDestination>> {
        return try {
            // Mock implementation - return sample popular destinations
            val destinations = listOf(
                PopularDestination("አዲስ አበባ", 150, 0.0),
                PopularDestination("አዳማ", 80, 25.0),
                PopularDestination("ባህርዳር", 60, 85.0)
            ).take(limit)
            
            Result.Success(destinations)
        } catch (e: Exception) {
            Result.Error(AppError.UnknownError(e.message ?: "Failed to get popular destinations"))
        }
    }

    override suspend fun preloadNearbyGroups(
        latitude: Double,
        longitude: Double,
        radiusKm: Double
    ): Result<Unit> {
        return try {
            // Mock implementation - in real app would preload groups into cache
            Result.Success(Unit)
        } catch (e: Exception) {
            Result.Error(AppError.UnknownError(e.message ?: "Failed to preload nearby groups"))
        }
    }
}
