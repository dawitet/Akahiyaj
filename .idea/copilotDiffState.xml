<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/dawitf/akahidegn/data/remote/service/impl/GroupServiceImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/dawitf/akahidegn/data/remote/service/impl/GroupServiceImpl.kt" />
              <option name="originalContent" value="package com.dawitf.akahidegn.data.remote.service.impl&#10;&#10;import android.util.Log&#10;import com.dawitf.akahidegn.core.error.AppError&#10;&#10;import com.dawitf.akahidegn.Group&#10;import com.dawitf.akahidegn.core.result.Result&#10;import com.dawitf.akahidegn.data.remote.service.GroupService&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.database.*&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class GroupServiceImpl @Inject constructor(&#10;    private val database: FirebaseDatabase,&#10;    private val auth: FirebaseAuth&#10;) : GroupService {&#10;&#10;    private val groupsRef: DatabaseReference = database.getReference(&quot;groups&quot;)&#10;&#10;    override fun getAllGroups(): Flow&lt;Result&lt;List&lt;Group&gt;&gt;&gt; = callbackFlow {&#10;            override fun onDataChange(snapshot: DataSnapshot) {&#10;                val groups = snapshot.children.mapNotNull { it.getValue(Group::class.java) }&#10;                val groups = snapshot.children.mapNotNull { it.getValue(Group::class.java) }&#10;                trySend(Result.success(groups))&#10;        }&#10;    }&#10;&#10;&#10;    override suspend fun createGroup(group: Group): Result&lt;Group&gt; {&#10;        return try {&#10;            Result.success(groupWithId)&#10;        awaitClose { groupsRef.removeEventListener(listener) }&#10;    override suspend fun updateGroup(group: Group): Result&lt;Group&gt; {&#10;        return try {&#10;            val groupId = group.groupId ?: throw Exception(&quot;Group ID is null&quot;)&#10;            groupsRef.child(groupId).setValue(group).await()&#10;            Result.success(group)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun deleteGroup(groupId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            groupsRef.child(groupId).removeValue().await()&#10;&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun joinGroup(groupId: String, userId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            val groupRef = groupsRef.child(groupId)&#10;            groupRef.child(&quot;members&quot;).child(userId).setValue(true).await()&#10;            groupRef.child(&quot;memberCount&quot;).runTransaction(object : Transaction.Handler {&#10;                override fun doTransaction(mutableData: MutableData): Transaction.Result {&#10;                    val currentCount = mutableData.getValue(Int::class.java) ?: 0&#10;                    mutableData.value = currentCount + 1&#10;                    return Transaction.success(mutableData)&#10;                }&#10;&#10;                override fun onComplete(error: DatabaseError?, committed: Boolean, currentData: DataSnapshot?) {&#10;                    // Handle completion, if needed&#10;                }&#10;            })&#10;&#10;            val userSnapshot = database.getReference(&quot;users&quot;).child(userId).get().await()&#10;            val userName = userSnapshot.child(&quot;name&quot;).getValue(String::class.java) ?: &quot;Unknown User&quot;&#10;&#10;            val notification = mapOf(&#10;                &quot;type&quot; to &quot;group_update&quot;,&#10;                &quot;title&quot; to &quot;New Member&quot;,&#10;                &quot;body&quot; to &quot;$userName has joined the group.&quot;&#10;            )&#10;            sendNotificationToGroupMembers(groupId, notification)&#10;&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun leaveGroup(groupId: String, userId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            val groupRef = groupsRef.child(groupId)&#10;            groupRef.child(&quot;members&quot;).child(userId).removeValue().await()&#10;            groupRef.child(&quot;memberCount&quot;).runTransaction(object : Transaction.Handler {&#10;                override fun doTransaction(mutableData: MutableData): Transaction.Result {&#10;                    val currentCount = mutableData.getValue(Int::class.java) ?: 0&#10;                    mutableData.value = maxOf(0, currentCount - 1)&#10;                    return Transaction.success(mutableData)&#10;                }&#10;&#10;                override fun onComplete(error: DatabaseError?, committed: Boolean, currentData: DataSnapshot?) {&#10;                    // Handle completion, if needed&#10;                }&#10;            })&#10;&#10;            val userSnapshot = database.getReference(&quot;users&quot;).child(userId).get().await()&#10;            val userName = userSnapshot.child(&quot;name&quot;).getValue(String::class.java) ?: &quot;Unknown User&quot;&#10;&#10;            val notification = mapOf(&#10;                &quot;type&quot; to &quot;group_update&quot;,&#10;                &quot;title&quot; to &quot;Member Left&quot;,&#10;                &quot;body&quot; to &quot;$userName has left the group.&quot;&#10;            )&#10;            sendNotificationToGroupMembers(groupId, notification)&#10;&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun getExpiredGroups(thresholdTimestamp: Long): Result&lt;List&lt;Group&gt;&gt; {&#10;        return try {&#10;            val snapshot = groupsRef.orderByChild(&quot;timestamp&quot;).endAt(thresholdTimestamp.toDouble()).get().await()&#10;            val expiredGroups = snapshot.children.mapNotNull { it.getValue(Group::class.java) }&#10;            Result.success(expiredGroups)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    &#10;&#10;    private suspend fun sendNotificationToGroupMembers(groupId: String, notification: Map&lt;String, String&gt;) {&#10;        try {&#10;            val groupSnapshot = groupsRef.child(groupId).get().await()&#10;            val group = groupSnapshot.getValue(Group::class.java)&#10;            if (group != null) {&#10;                val tokens = group.memberDetails.map { it.value.phone }.filterNotNull()&#10;                val data = notification + mapOf(&quot;groupId&quot; to groupId)&#10;                // In a real app, you would use a server to send notifications to a list of tokens.&#10;                // For this example, we'll just log the tokens and data.&#10;                Log.d(&quot;NOTIFICATION&quot;, &quot;Sending notification to tokens: $tokens with data: $data&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;NOTIFICATION&quot;, &quot;Failed to send notification&quot;, e)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.dawitf.akahidegn.data.remote.service.impl&#10;&#10;import android.util.Log&#10;import com.dawitf.akahidegn.core.error.AppError&#10;&#10;import com.dawitf.akahidegn.Group&#10;import com.dawitf.akahidegn.core.result.Result&#10;import com.dawitf.akahidegn.data.remote.service.GroupService&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.database.*&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class GroupServiceImpl @Inject constructor(&#10;    private val database: FirebaseDatabase,&#10;    private val auth: FirebaseAuth&#10;) : GroupService {&#10;&#10;    private val groupsRef: DatabaseReference = database.getReference(&quot;groups&quot;)&#10;&#10;    override fun getAllGroups(): Flow&lt;Result&lt;List&lt;Group&gt;&gt;&gt; = callbackFlow {&#10;        Log.d(&quot;GroupService&quot;, &quot;Setting up real-time listener for all groups&quot;)&#10;        val listener = object : ValueEventListener {&#10;            override fun onDataChange(snapshot: DataSnapshot) {&#10;                try {&#10;                    val groups = snapshot.children.mapNotNull { childSnapshot -&gt;&#10;                        try {&#10;                            val group = childSnapshot.getValue(Group::class.java)&#10;                            if (group != null) {&#10;                                Log.d(&quot;GroupService&quot;, &quot;Loaded group: ${group.groupId} - ${group.destinationName}&quot;)&#10;                                group&#10;                            } else {&#10;                                Log.w(&quot;GroupService&quot;, &quot;Failed to deserialize group from snapshot: ${childSnapshot.key}&quot;)&#10;                                null&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;GroupService&quot;, &quot;Error deserializing group ${childSnapshot.key}&quot;, e)&#10;                            null&#10;                        }&#10;                    }&#10;                    Log.d(&quot;GroupService&quot;, &quot;Successfully loaded ${groups.size} groups from Firebase&quot;)&#10;                    trySend(Result.success(groups))&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;GroupService&quot;, &quot;Error processing groups data&quot;, e)&#10;                    trySend(Result.failure(AppError.UnknownError(e.message ?: &quot;Failed to process groups data&quot;)))&#10;                }&#10;            }&#10;&#10;            override fun onCancelled(error: DatabaseError) {&#10;                Log.e(&quot;GroupService&quot;, &quot;Firebase listener cancelled: ${error.message}&quot;)&#10;                trySend(Result.failure(AppError.NetworkError.FirebaseError(error.message)))&#10;            }&#10;        }&#10;        &#10;        // Enable Firebase offline persistence to improve reliability&#10;        database.setPersistenceEnabled(true)&#10;        groupsRef.keepSynced(true) // Keep groups data synced even when offline&#10;        groupsRef.addValueEventListener(listener)&#10;        &#10;        awaitClose { &#10;            Log.d(&quot;GroupService&quot;, &quot;Removing Firebase listener&quot;)&#10;            groupsRef.removeEventListener(listener) &#10;        }&#10;    }&#10;&#10;    override suspend fun getGroupById(groupId: String): Result&lt;Group&gt; {&#10;        return try {&#10;            val snapshot = groupsRef.child(groupId).get().await()&#10;            val group = snapshot.getValue(Group::class.java)&#10;            if (group != null) {&#10;                Result.success(group)&#10;            } else {&#10;                Result.failure(AppError.ValidationError.NotFound(&quot;Group not found&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    &#10;&#10;    override suspend fun createGroup(group: Group): Result&lt;Group&gt; {&#10;        return try {&#10;            val newGroupRef = groupsRef.push()&#10;            val newGroupId = newGroupRef.key ?: throw Exception(&quot;Failed to generate group ID&quot;)&#10;            val groupWithId = group.copy(groupId = newGroupId)&#10;            newGroupRef.setValue(groupWithId).await()&#10;            Result.success(groupWithId)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun updateGroup(group: Group): Result&lt;Group&gt; {&#10;        return try {&#10;            val groupId = group.groupId ?: throw Exception(&quot;Group ID is null&quot;)&#10;            groupsRef.child(groupId).setValue(group).await()&#10;            Result.success(group)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun deleteGroup(groupId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            groupsRef.child(groupId).removeValue().await()&#10;&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun joinGroup(groupId: String, userId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            val groupRef = groupsRef.child(groupId)&#10;            groupRef.child(&quot;members&quot;).child(userId).setValue(true).await()&#10;            groupRef.child(&quot;memberCount&quot;).runTransaction(object : Transaction.Handler {&#10;                override fun doTransaction(mutableData: MutableData): Transaction.Result {&#10;                    val currentCount = mutableData.getValue(Int::class.java) ?: 0&#10;                    mutableData.value = currentCount + 1&#10;                    return Transaction.success(mutableData)&#10;                }&#10;&#10;                override fun onComplete(error: DatabaseError?, committed: Boolean, currentData: DataSnapshot?) {&#10;                    // Handle completion, if needed&#10;                }&#10;            })&#10;&#10;            val userSnapshot = database.getReference(&quot;users&quot;).child(userId).get().await()&#10;            val userName = userSnapshot.child(&quot;name&quot;).getValue(String::class.java) ?: &quot;Unknown User&quot;&#10;&#10;            val notification = mapOf(&#10;                &quot;type&quot; to &quot;group_update&quot;,&#10;                &quot;title&quot; to &quot;New Member&quot;,&#10;                &quot;body&quot; to &quot;$userName has joined the group.&quot;&#10;            )&#10;            sendNotificationToGroupMembers(groupId, notification)&#10;&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun leaveGroup(groupId: String, userId: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            val groupRef = groupsRef.child(groupId)&#10;            groupRef.child(&quot;members&quot;).child(userId).removeValue().await()&#10;            groupRef.child(&quot;memberCount&quot;).runTransaction(object : Transaction.Handler {&#10;                override fun doTransaction(mutableData: MutableData): Transaction.Result {&#10;                    val currentCount = mutableData.getValue(Int::class.java) ?: 0&#10;                    mutableData.value = maxOf(0, currentCount - 1)&#10;                    return Transaction.success(mutableData)&#10;                }&#10;&#10;                override fun onComplete(error: DatabaseError?, committed: Boolean, currentData: DataSnapshot?) {&#10;                    // Handle completion, if needed&#10;                }&#10;            })&#10;&#10;            val userSnapshot = database.getReference(&quot;users&quot;).child(userId).get().await()&#10;            val userName = userSnapshot.child(&quot;name&quot;).getValue(String::class.java) ?: &quot;Unknown User&quot;&#10;&#10;            val notification = mapOf(&#10;                &quot;type&quot; to &quot;group_update&quot;,&#10;                &quot;title&quot; to &quot;Member Left&quot;,&#10;                &quot;body&quot; to &quot;$userName has left the group.&quot;&#10;            )&#10;            sendNotificationToGroupMembers(groupId, notification)&#10;&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun getExpiredGroups(thresholdTimestamp: Long): Result&lt;List&lt;Group&gt;&gt; {&#10;        return try {&#10;            val snapshot = groupsRef.orderByChild(&quot;timestamp&quot;).endAt(thresholdTimestamp.toDouble()).get().await()&#10;            val expiredGroups = snapshot.children.mapNotNull { it.getValue(Group::class.java) }&#10;            Result.success(expiredGroups)&#10;        } catch (e: Exception) {&#10;            Result.failure(AppError.UnknownError(e.message ?: &quot;Unknown error occurred&quot;))&#10;        }&#10;    }&#10;&#10;    &#10;&#10;    private suspend fun sendNotificationToGroupMembers(groupId: String, notification: Map&lt;String, String&gt;) {&#10;        try {&#10;            val groupSnapshot = groupsRef.child(groupId).get().await()&#10;            val group = groupSnapshot.getValue(Group::class.java)&#10;            if (group != null) {&#10;                val tokens = group.memberDetails.map { it.value.phone }.filterNotNull()&#10;                val data = notification + mapOf(&quot;groupId&quot; to groupId)&#10;                // In a real app, you would use a server to send notifications to a list of tokens.&#10;                // For this example, we'll just log the tokens and data.&#10;                Log.d(&quot;NOTIFICATION&quot;, &quot;Sending notification to tokens: $tokens with data: $data&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;NOTIFICATION&quot;, &quot;Failed to send notification&quot;, e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/dawitf/akahidegn/ui/screens/ActiveGroupsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/dawitf/akahidegn/ui/screens/ActiveGroupsScreen.kt" />
              <option name="originalContent" value="package com.dawitf.akahidegn.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.dawitf.akahidegn.ui.components.ActiveGroupsTabLayout&#10;import com.dawitf.akahidegn.ui.components.GroupCard&#10;import com.dawitf.akahidegn.viewmodel.MainViewModel&#10;import com.google.firebase.auth.ktx.auth&#10;import com.google.firebase.ktx.Firebase&#10;&#10;@Composable&#10;fun ActiveGroupsScreen() {&#10;    val viewModel: MainViewModel = hiltViewModel()&#10;    val groups by viewModel.groups.collectAsState()&#10;    val isLoading by viewModel.isLoadingGroups.collectAsState()&#10;    val currentUserId = Firebase.auth.currentUser?.uid&#10;&#10;    // Filter groups to show only ones the current user is a member of&#10;    val activeGroups = groups.filter { group -&gt;&#10;        currentUserId != null &amp;&amp; group.members.containsKey(currentUserId) &amp;&amp; group.members[currentUserId] == true&#10;    }&#10;&#10;    ActiveGroupsTabLayout(&#10;        headerContent = {&#10;            Text(&#10;                text = &quot;Active Groups&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                modifier = Modifier.align(Alignment.Center)&#10;            )&#10;        },&#10;        mainContent = {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp)&#10;            ) {&#10;                if (isLoading) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        verticalArrangement = Arrangement.Center,&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Loading your active groups...&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                    }&#10;                } else if (activeGroups.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        verticalArrangement = Arrangement.Center,&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;You haven't joined any groups yet.&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            modifier = Modifier.padding(bottom = 8.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;Join a group from the main screen to see it here!&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        items(&#10;                            items = activeGroups,&#10;                            key = { group -&gt; group.groupId ?: &quot;&quot; }&#10;                        ) { group -&gt;&#10;                            GroupCard(&#10;                                group = group,&#10;                                userLocation = null, // Don't show distance in active groups&#10;                                onJoinClick = { /* Already joined */ },&#10;                                onCardClick = { /* Handle group details */ },&#10;                                showJoinButton = false // Don't show join button for active groups&#10;                                showJoinButton = false // Don't show join button for active groups&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.dawitf.akahidegn.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.dawitf.akahidegn.ui.components.ActiveGroupsTabLayout&#10;import com.dawitf.akahidegn.ui.components.GroupCard&#10;import com.dawitf.akahidegn.viewmodel.MainViewModel&#10;import com.google.firebase.auth.ktx.auth&#10;import com.google.firebase.ktx.Firebase&#10;&#10;@Composable&#10;fun ActiveGroupsScreen() {&#10;    val viewModel: MainViewModel = hiltViewModel()&#10;    val groups by viewModel.groups.collectAsState()&#10;    val isLoading by viewModel.isLoadingGroups.collectAsState()&#10;    val currentUserId = Firebase.auth.currentUser?.uid&#10;&#10;    // Filter groups to show only ones the current user is a member of&#10;    val activeGroups = groups.filter { group -&gt;&#10;        currentUserId != null &amp;&amp; group.members.containsKey(currentUserId) &amp;&amp; group.members[currentUserId] == true&#10;    }&#10;&#10;    ActiveGroupsTabLayout(&#10;        headerContent = {&#10;            Text(&#10;                text = &quot;Active Groups&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                modifier = Modifier.align(Alignment.Center)&#10;            )&#10;        },&#10;        mainContent = {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp)&#10;            ) {&#10;                if (isLoading) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        verticalArrangement = Arrangement.Center,&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Loading your active groups...&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                    }&#10;                } else if (activeGroups.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        verticalArrangement = Arrangement.Center,&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;You haven't joined any groups yet.&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            modifier = Modifier.padding(bottom = 8.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;Join a group from the main screen to see it here!&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        items(&#10;                            items = activeGroups,&#10;                            key = { group -&gt; group.groupId ?: &quot;&quot; }&#10;                        ) { group -&gt;&#10;                            GroupCard(&#10;                                group = group,&#10;                                userLocation = null, // Don't show distance in active groups&#10;                                onClick = { /* Handle group details */ },&#10;                                onJoinClick = null // Don't show join button for active groups&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/dawitf/akahidegn/ui/screens/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/dawitf/akahidegn/ui/screens/SettingsScreen.kt" />
              <option name="originalContent" value="package com.dawitf.akahidegn.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.res.stringResource&#10;import com.dawitf.akahidegn.R&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.SwitchDefaults&#10;import com.dawitf.akahidegn.viewmodel.SettingsViewModel&#10;import com.dawitf.akahidegn.ui.components.SettingsTabLayout&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(onSignOut: () -&gt; Unit) { // Added onSignOut callback&#10;    val viewModel: SettingsViewModel = hiltViewModel()&#10;    val notificationsEnabled = viewModel.notificationsEnabled.collectAsState()&#10;    val soundEnabled = viewModel.soundEnabled.collectAsState()&#10;    val vibrationEnabled = viewModel.vibrationEnabled.collectAsState()&#10;    &#10;    SettingsTabLayout(&#10;        headerContent = {&#10;            Text(&#10;                text = &quot;Settings&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                modifier = Modifier.align(Alignment.Center)&#10;            )&#10;        },&#10;        mainContent = {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.SpaceBetween,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = stringResource(id = R.string.settings_description),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            // Toggles&#10;            Column(modifier = Modifier.fillMaxWidth()) {&#10;                SettingToggleRow(&#10;                    title = stringResource(id = R.string.notification_permission_needed),&#10;                    checked = notificationsEnabled.value,&#10;                    onCheckedChange = { viewModel.setNotificationsEnabled(it) }&#10;                )&#10;                Spacer(Modifier.height(12.dp))&#10;                SettingToggleRow(&#10;                    title = stringResource(id = R.string.settings_sound_effects),&#10;                    checked = soundEnabled.value,&#10;                    onCheckedChange = { viewModel.setSoundEnabled(it) }&#10;                )&#10;                Spacer(Modifier.height(12.dp))&#10;                SettingToggleRow(&#10;                    title = stringResource(id = R.string.settings_vibration),&#10;                    checked = vibrationEnabled.value,&#10;                    onCheckedChange = { viewModel.setVibrationEnabled(it) }&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.weight(1f)) // Pushes sign out button to the bottom&#10;&#10;                    color = Color.White,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                )&#10;            }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun SettingToggleRow(&#10;    title: String,&#10;    checked: Boolean,&#10;    onCheckedChange: (Boolean) -&gt; Unit&#10;) {&#10;    androidx.compose.foundation.layout.Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(text = title, style = MaterialTheme.typography.bodyLarge)&#10;        Switch(&#10;            checked = checked,&#10;            onCheckedChange = onCheckedChange,&#10;            colors = SwitchDefaults.colors(&#10;                checkedThumbColor = MaterialTheme.colorScheme.onPrimary,&#10;                checkedTrackColor = MaterialTheme.colorScheme.primary&#10;            )&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.dawitf.akahidegn.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.res.stringResource&#10;import com.dawitf.akahidegn.R&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.SwitchDefaults&#10;import com.dawitf.akahidegn.viewmodel.SettingsViewModel&#10;import com.dawitf.akahidegn.ui.components.SettingsTabLayout&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(onSignOut: () -&gt; Unit) { // Added onSignOut callback&#10;    val viewModel: SettingsViewModel = hiltViewModel()&#10;    val notificationsEnabled = viewModel.notificationsEnabled.collectAsState()&#10;    val soundEnabled = viewModel.soundEnabled.collectAsState()&#10;    val vibrationEnabled = viewModel.vibrationEnabled.collectAsState()&#10;    &#10;    SettingsTabLayout(&#10;        headerContent = {&#10;            Text(&#10;                text = &quot;Settings&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                modifier = Modifier.align(Alignment.Center)&#10;            )&#10;        },&#10;        mainContent = {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.SpaceBetween,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = stringResource(id = R.string.settings_description),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            // Toggles&#10;            Column(modifier = Modifier.fillMaxWidth()) {&#10;                SettingToggleRow(&#10;                    title = stringResource(id = R.string.notification_permission_needed),&#10;                    checked = notificationsEnabled.value,&#10;                    onCheckedChange = { viewModel.setNotificationsEnabled(it) }&#10;                )&#10;                Spacer(Modifier.height(12.dp))&#10;                SettingToggleRow(&#10;                    title = stringResource(id = R.string.settings_sound_effects),&#10;                    checked = soundEnabled.value,&#10;                    onCheckedChange = { viewModel.setSoundEnabled(it) }&#10;                )&#10;                Spacer(Modifier.height(12.dp))&#10;                SettingToggleRow(&#10;                    title = stringResource(id = R.string.settings_vibration),&#10;                    checked = vibrationEnabled.value,&#10;                    onCheckedChange = { viewModel.setVibrationEnabled(it) }&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.weight(1f)) // Pushes sign out button to the bottom&#10;&#10;            // Developer credit&#10;            Text(&#10;                text = &quot;የዳዊት ስራ&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(vertical = 8.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = onSignOut, // Call the provided lambda&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.error)&#10;            ) {&#10;                Icon(Icons.AutoMirrored.Filled.ExitToApp, contentDescription = &quot;Sign Out&quot;, tint = Color.White)&#10;                Text(&#10;                    text = stringResource(id = R.string.settings_sign_out),&#10;                    color = Color.White,&#10;                    modifier = Modifier.padding(start = 8.dp)&#10;                )&#10;            }&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun SettingToggleRow(&#10;    title: String,&#10;    checked: Boolean,&#10;    onCheckedChange: (Boolean) -&gt; Unit&#10;) {&#10;    androidx.compose.foundation.layout.Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(text = title, style = MaterialTheme.typography.bodyLarge)&#10;        Switch(&#10;            checked = checked,&#10;            onCheckedChange = onCheckedChange,&#10;            colors = SwitchDefaults.colors(&#10;                checkedThumbColor = MaterialTheme.colorScheme.onPrimary,&#10;                checkedTrackColor = MaterialTheme.colorScheme.primary&#10;            )&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>